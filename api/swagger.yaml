---
swagger: "2.0"
info:
  description: "Api Documentation"
  version: "1.0"
  title: "Api Documentation"
  termsOfService: "urn:tos"
  contact: {}
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
host: "localhost:1443"
basePath: "/pp-restapi"
tags:
- name: "otp-controller"
  description: "OTP Controller"
- name: "payments-controller"
  description: "Payments Controller"
- name: "psp-controller"
  description: "Psp Controller"
- name: "resource-controller"
  description: "Resource Controller"
- name: "transaction-controller"
  description: "Transaction Controller"
- name: "users-controller"
  description: "Users Controller"
- name: "wallet-controller"
  description: "Wallet Controller"
produces:
- "application/json"
paths:
  /v1/payments/{id}:
    delete:
      tags:
      - "payments-controller"
      summary: "deletePayment"
      operationId: "deletePaymentUsingDELETE"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        204:
          description: "No Content"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
      - Bearer: []
      x-swagger-router-controller: "PaymentsController"
  /v1/payments/{id}/actions/check:
    get:
      tags:
      - "payments-controller"
      summary: "checkPayment"
      operationId: "checkPaymentUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PaymentResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "PaymentsController"
  /v1/payments/{id}/actions/check-internal:
    get:
      tags:
      - "payments-controller"
      summary: "getPayment"
      operationId: "getPaymentUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PaymentResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "PaymentsController"
  /v1/payments/{id}/actions/pay:
    post:
      tags:
      - "payments-controller"
      summary: "pay"
      operationId: "payUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      - in: "body"
        name: "payRequest"
        description: "payRequest"
        required: true
        schema:
          $ref: "#/definitions/PayRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TransactionResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "PaymentsController"
  /v1/psps:
    get:
      tags:
      - "psp-controller"
      summary: "getPspList"
      operationId: "getPspListUsingGET"
      parameters:
      - name: "paymentType"
        in: "query"
        description: "paymentType"
        required: false
        type: "string"
      - name: "paymentModel"
        in: "query"
        description: "paymentModel"
        required: false
        type: "integer"
        format: "int64"
      - name: "idPayment"
        in: "query"
        description: "idPayment"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PspListResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "PspController"
  /v1/psps/{id}:
    get:
      tags:
      - "psp-controller"
      summary: "getPsp"
      operationId: "getPspUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PspResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "PspController"
  /v1/resources:
    get:
      tags:
      - "resource-controller"
      summary: "getResources"
      operationId: "getResourcesUsingGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ResourcesResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "ResourceController"
  /v1/resources/psp/{id}:
    get:
      tags:
      - "resource-controller"
      summary: "getPspLogo"
      operationId: "getPspLogoUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "ResourceController"
  /v1/resources/service/{id}:
    get:
      tags:
      - "resource-controller"
      summary: "getServiceLogo"
      operationId: "getServiceLogoUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "ResourceController"
  /v1/transactions:
    get:
      tags:
      - "transaction-controller"
      summary: "getTransactions"
      operationId: "getTransactionsUsingGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TransactionListResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "TransactionController"
  /v1/transactions/{id}:
    get:
      tags:
      - "transaction-controller"
      summary: "getTransaction"
      operationId: "getTransactionUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TransactionResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "TransactionController"
  /v1/transactions/{id}/actions/check:
    get:
      tags:
      - "transaction-controller"
      summary: "checkStatus"
      operationId: "checkStatusUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/TransactionStatusResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "TransactionController"
  /v1/transactions/{id}/actions/resume:
    post:
      tags:
      - "transaction-controller"
      summary: "resume"
      operationId: "resumeUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      - in: "body"
        name: "resumeRequest"
        description: "resumeRequest"
        required: true
        schema:
          $ref: "#/definitions/ResumeRequest"
      responses:
        200:
          description: "OK"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "TransactionController"
  /v1/users:
    get:
      tags:
      - "users-controller"
      summary: "getUser"
      operationId: "getUserUsingGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
    put:
      tags:
      - "users-controller"
      summary: "updateUser"
      operationId: "updateUserUsingPUT"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "userRequest"
        description: "userRequest"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/approve-terms:
    post:
      tags:
      - "users-controller"
      summary: "approveTerms"
      operationId: "approveTermsUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "approveTermsRequest"
        description: "approveTermsRequest"
        required: true
        schema:
          $ref: "#/definitions/ApproveTermsRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/change-email:
    post:
      tags:
      - "users-controller"
      summary: "changeEmail"
      operationId: "changeEmailUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "changeEmailRequest"
        description: "changeEmailRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangeEmailRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/change-phone:
    post:
      tags:
      - "users-controller"
      summary: "changePhone"
      operationId: "changePhoneUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "changePhoneRequest"
        description: "changePhoneRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangePhoneRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/check-username-availability:
    get:
      tags:
      - "users-controller"
      summary: "checkUsername"
      operationId: "checkUsernameUsingGET"
      parameters:
      - name: "username"
        in: "query"
        description: "username"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CheckUsernameResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/generate-reset-password:
    get:
      tags:
      - "users-controller"
      summary: "generateResetPassword"
      operationId: "generateResetPasswordUsingGET"
      parameters:
      - name: "idPayment"
        in: "query"
        description: "idPayment"
        required: false
        type: "string"
      - name: "verifiedPuk"
        in: "query"
        description: "verifiedPuk"
        required: false
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/VerifyUserResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/logic-delete-user:
    post:
      tags:
      - "users-controller"
      summary: "logicDeletePendingUser"
      operationId: "logicDeletePendingUserUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "logicDeleteRequest"
        description: "logicDeleteRequest"
        required: true
        schema:
          $ref: "#/definitions/LogicDeleteRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/LogicDeleteResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/login:
    post:
      tags:
      - "users-controller"
      summary: "login"
      operationId: "loginUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "loginRequest"
        description: "loginRequest"
        required: true
        schema:
          $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SessionResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/logout:
    post:
      tags:
      - "users-controller"
      summary: "logout"
      operationId: "logoutUsingPOST"
      consumes:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/recovery:
    post:
      tags:
      - "users-controller"
      summary: "recovery"
      operationId: "recoveryUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "recoveryRequest"
        description: "recoveryRequest"
        required: true
        schema:
          $ref: "#/definitions/RecoveryRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/send-email-verification-token:
    get:
      tags:
      - "users-controller"
      summary: "sendEmailVerificationToken"
      operationId: "sendEmailVerificationTokenUsingGET"
      parameters:
      - name: "email"
        in: "query"
        description: "email"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
            enum:
            - "100"
            - "101"
            - "102"
            - "103"
            - "200"
            - "201"
            - "202"
            - "203"
            - "204"
            - "205"
            - "206"
            - "207"
            - "208"
            - "226"
            - "300"
            - "301"
            - "302"
            - "303"
            - "304"
            - "305"
            - "307"
            - "308"
            - "400"
            - "401"
            - "402"
            - "403"
            - "404"
            - "405"
            - "406"
            - "407"
            - "408"
            - "409"
            - "410"
            - "411"
            - "412"
            - "413"
            - "414"
            - "415"
            - "416"
            - "417"
            - "418"
            - "419"
            - "420"
            - "421"
            - "422"
            - "423"
            - "424"
            - "426"
            - "428"
            - "429"
            - "431"
            - "451"
            - "500"
            - "501"
            - "502"
            - "503"
            - "504"
            - "505"
            - "506"
            - "507"
            - "508"
            - "509"
            - "510"
            - "511"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/send-otp:
    post:
      tags:
      - "otp-controller"
      summary: "sendOtp"
      operationId: "sendOtpUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "sendOtpRequest"
        description: "sendOtpRequest"
        required: true
        schema:
          $ref: "#/definitions/SendOtpRequest"
      responses:
        200:
          description: "OK"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "OtpController"
  /v1/users/actions/set-password:
    post:
      tags:
      - "users-controller"
      summary: "setPassword"
      operationId: "setPasswordUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "setPasswordRequest"
        description: "setPasswordRequest"
        required: true
        schema:
          $ref: "#/definitions/SetPasswordRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
    put:
      tags:
      - "users-controller"
      summary: "updatePassword"
      operationId: "updatePasswordUsingPUT"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "setPasswordRequest"
        description: "setPasswordRequest"
        required: true
        schema:
          $ref: "#/definitions/SetPasswordRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/signin:
    post:
      tags:
      - "users-controller"
      summary: "signin"
      operationId: "signinUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "verifyUserRequest"
        description: "verifyUserRequest"
        required: true
        schema:
          $ref: "#/definitions/VerifyUserRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/start-session:
    post:
      tags:
      - "users-controller"
      summary: "startSession"
      operationId: "startSessionUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "startSessionRequest"
        description: "startSessionRequest"
        required: true
        schema:
          $ref: "#/definitions/StartSessionRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SessionResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/start-session-spid:
    get:
      tags:
      - "users-controller"
      summary: "getSessionSpid"
      operationId: "getSessionSpidUsingGET"
      parameters:
      - name: "spidToken"
        in: "query"
        description: "spidToken"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpidSessionResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "UsersController"
    post:
      tags:
      - "users-controller"
      summary: "startSessionSpid"
      operationId: "startSessionSpidUsingPOST"
      consumes:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/SpidSessionResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "UsersController"
    put:
      tags:
      - "users-controller"
      summary: "updateSessionSpid"
      operationId: "updateSessionSpidUsingPUT"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "startSpidSessionRequest"
        description: "startSpidSessionRequest"
        required: true
        schema:
          $ref: "#/definitions/StartSpidSessionRequest"
      responses:
        200:
          description: "OK"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/validate-email/{id}:
    get:
      tags:
      - "users-controller"
      summary: "emailValidation"
      operationId: "emailValidationUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/validate-reset-password/{id}:
    get:
      tags:
      - "users-controller"
      summary: "resetPasswordValidation"
      operationId: "resetPasswordValidationUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/verify-otp:
    post:
      tags:
      - "otp-controller"
      summary: "verifyOtp"
      operationId: "verifyOtpUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "verifyOtpRequest"
        description: "verifyOtpRequest"
        required: true
        schema:
          $ref: "#/definitions/VerifyOtpRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "OtpController"
  /v1/users/actions/verify-password:
    post:
      tags:
      - "users-controller"
      summary: "verifyUserPassword"
      operationId: "verifyUserPasswordUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "verifyUserRequest"
        description: "verifyUserRequest"
        required: true
        schema:
          $ref: "#/definitions/VerifyUserRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/users/actions/verify-puk:
    post:
      tags:
      - "users-controller"
      summary: "verifyUserPuk"
      operationId: "verifyUserPukUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "verifyUserRequest"
        description: "verifyUserRequest"
        required: true
        schema:
          $ref: "#/definitions/VerifyUserRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/VerifyUserResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "UsersController"
  /v1/wallet:
    get:
      tags:
      - "wallet-controller"
      summary: "getWallets"
      operationId: "getWalletsUsingGET"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WalletListResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
    post:
      tags:
      - "wallet-controller"
      summary: "addWallet"
      operationId: "addWalletUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "walletRequest"
        description: "walletRequest"
        required: true
        schema:
          $ref: "#/definitions/WalletRequest"
      - name: "language"
        in: "query"
        description: "language"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WalletResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
  /v1/wallet/actions/check-card-bin:
    post:
      tags:
      - "wallet-controller"
      summary: "checkCardBin"
      operationId: "checkCardBinUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "checkCardBinRequest"
        description: "checkCardBinRequest"
        required: true
        schema:
          $ref: "#/definitions/CheckCardBinRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CheckCardBinResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
  /v1/wallet/{id}:
    get:
      tags:
      - "wallet-controller"
      summary: "getWallet"
      operationId: "getWalletUsingGET"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WalletResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
    put:
      tags:
      - "wallet-controller"
      summary: "updateWallet"
      operationId: "updateWalletUsingPUT"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "walletRequest"
        description: "walletRequest"
        required: true
        schema:
          $ref: "#/definitions/WalletRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WalletResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
    delete:
      tags:
      - "wallet-controller"
      summary: "deleteWallet"
      operationId: "deleteWalletUsingDELETE"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
        204:
          description: "No Content"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
  /v1/wallet/{id}/actions/confirm:
    post:
      tags:
      - "wallet-controller"
      summary: "confirmWallet"
      operationId: "confirmWalletUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WalletResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
  /v1/wallet/{id}/actions/favourite:
    post:
      tags:
      - "wallet-controller"
      summary: "favouriteWallet"
      operationId: "favouriteWalletUsingPOST"
      consumes:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WalletResponse"
        201:
          description: "Created"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
      security:
      - Bearer: []
      x-swagger-router-controller: "WalletController"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Amount:
    type: "object"
    properties:
      amount:
        type: "integer"
        format: "int64"
      currency:
        type: "string"
      currencyNumber:
        type: "string"
      decimalDigits:
        type: "integer"
        format: "int32"
    title: "Amount"
    example:
      amount: 0
      currencyNumber: "currencyNumber"
      currency: "currency"
      decimalDigits: 6
  ApproveTerms:
    type: "object"
    properties:
      privacy:
        type: "boolean"
      terms:
        type: "boolean"
    title: "ApproveTerms"
    example:
      terms: true
      privacy: true
  ApproveTermsRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ApproveTerms"
    title: "ApproveTermsRequest"
    example:
      data:
        terms: true
        privacy: true
  ChangeEmail:
    type: "object"
    properties:
      newEmail:
        type: "string"
      tokenPukVerified:
        type: "string"
    title: "ChangeEmail"
    example:
      tokenPukVerified: "tokenPukVerified"
      newEmail: "newEmail"
  ChangeEmailRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ChangeEmail"
    title: "ChangeEmailRequest"
    example:
      data:
        tokenPukVerified: "tokenPukVerified"
        newEmail: "newEmail"
  ChangePhone:
    type: "object"
    properties:
      newCellphone:
        type: "string"
      tokenPukVerified:
        type: "string"
    title: "ChangePhone"
    example:
      newCellphone: "newCellphone"
      tokenPukVerified: "tokenPukVerified"
  ChangePhoneRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ChangePhone"
    title: "ChangePhoneRequest"
    example:
      data:
        newCellphone: "newCellphone"
        tokenPukVerified: "tokenPukVerified"
  CheckCardBin:
    type: "object"
    properties:
      cardBin:
        type: "string"
      urlLogo:
        type: "string"
    title: "CheckCardBin"
    example:
      cardBin: "cardBin"
      urlLogo: "urlLogo"
  CheckCardBinRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/CheckCardBin"
    title: "CheckCardBinRequest"
    example:
      data:
        cardBin: "cardBin"
        urlLogo: "urlLogo"
  CheckCardBinResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/CheckCardBin"
    title: "CheckCardBinResponse"
    example:
      data:
        cardBin: "cardBin"
        urlLogo: "urlLogo"
  CheckUsername:
    type: "object"
    properties:
      available:
        type: "boolean"
      username:
        type: "string"
    title: "CheckUsername"
    example:
      available: true
      username: "username"
  CheckUsernameResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/CheckUsername"
    title: "CheckUsernameResponse"
    example:
      data:
        available: true
        username: "username"
  CreditCard:
    type: "object"
    properties:
      brandLogo:
        type: "string"
      expireMonth:
        type: "string"
      expireYear:
        type: "string"
      flag3dsVerified:
        type: "boolean"
      holder:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      pan:
        type: "string"
      securityCode:
        type: "string"
    title: "CreditCard"
    example:
      expireMonth: "expireMonth"
      securityCode: "securityCode"
      flag3dsVerified: true
      holder: "holder"
      id: 0
      pan: "pan"
      brandLogo: "brandLogo"
      expireYear: "expireYear"
  Device:
    type: "object"
    properties:
      idDevice:
        type: "integer"
        format: "int64"
      idNotificationConfig:
        type: "string"
      idUser:
        type: "integer"
        format: "int64"
      os:
        type: "string"
        enum:
        - "ANDROID"
        - "IOS"
      scale:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        enum:
        - "ACTIVE"
        - "DISABLED"
      token:
        type: "string"
      userAgent:
        type: "string"
    title: "Device"
    example:
      idUser: 6
      os: "ANDROID"
      scale: 1
      userAgent: "userAgent"
      idDevice: 0
      idNotificationConfig: "idNotificationConfig"
      status: "ACTIVE"
      token: "token"
  LogicDelete:
    type: "object"
    properties:
      email:
        type: "string"
      userStatusEnum:
        type: "array"
        items:
          type: "string"
          enum:
          - "ANONYMOUS"
          - "REGISTERED"
          - "REGISTERED_SPID"
          - "NEED_OTP"
          - "NEED_PASSWORD"
          - "WAITING_NEW_PASSWORD"
          - "DELETED"
    title: "LogicDelete"
    example:
      userStatusEnum:
      - "ANONYMOUS"
      - "ANONYMOUS"
      email: "email"
  LogicDeleteRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/LogicDelete"
    title: "LogicDeleteRequest"
    example:
      data:
        userStatusEnum:
        - "ANONYMOUS"
        - "ANONYMOUS"
        email: "email"
  LogicDeleteResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/LogicDelete"
    title: "LogicDeleteResponse"
    example:
      data:
        userStatusEnum:
        - "ANONYMOUS"
        - "ANONYMOUS"
        email: "email"
  Login:
    type: "object"
    properties:
      loginFromSSO:
        type: "boolean"
      password:
        type: "string"
      username:
        type: "string"
    title: "Login"
    example:
      password: "password"
      loginFromSSO: true
      username: "username"
  LoginRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Login"
    title: "LoginRequest"
    example:
      data:
        password: "password"
        loginFromSSO: true
        username: "username"
  Otp:
    type: "object"
    properties:
      value:
        type: "string"
    title: "Otp"
    example:
      value: "value"
  Pay:
    type: "object"
    properties:
      cvv:
        type: "string"
      idWallet:
        type: "integer"
        format: "int64"
      mobileToken:
        type: "string"
      tipo:
        type: "string"
    title: "Pay"
    example:
      cvv: "cvv"
      tipo: "tipo"
      mobileToken: "mobileToken"
      idWallet: 0
  PayRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Pay"
    title: "PayRequest"
    example:
      data:
        cvv: "cvv"
        tipo: "tipo"
        mobileToken: "mobileToken"
        idWallet: 0
  Payment:
    type: "object"
    properties:
      amount:
        $ref: "#/definitions/Amount"
      bolloDigitale:
        type: "boolean"
      cancelled:
        type: "boolean"
      email:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      idPayment:
        type: "string"
      receiver:
        type: "string"
      subject:
        type: "string"
      urlRedirectEc:
        type: "string"
    title: "Payment"
    example:
      idPayment: "idPayment"
      urlRedirectEc: "urlRedirectEc"
      amount:
        amount: 0
        currencyNumber: "currencyNumber"
        currency: "currency"
        decimalDigits: 6
      receiver: "receiver"
      subject: "subject"
      cancelled: true
      id: 1
      bolloDigitale: true
      email: "email"
  PaymentResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Payment"
    title: "PaymentResponse"
    example:
      data:
        idPayment: "idPayment"
        urlRedirectEc: "urlRedirectEc"
        amount:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        receiver: "receiver"
        subject: "subject"
        cancelled: true
        id: 1
        bolloDigitale: true
        email: "email"
  Psp:
    type: "object"
    properties:
      appChannel:
        type: "boolean"
      businessName:
        type: "string"
      cancelled:
        type: "boolean"
      fixedCost:
        $ref: "#/definitions/Amount"
      flagStamp:
        type: "boolean"
      id:
        type: "integer"
        format: "int64"
      idCard:
        type: "integer"
        format: "int64"
      idChannel:
        type: "string"
      idIntermediary:
        type: "string"
      idPsp:
        type: "string"
      lingua:
        type: "string"
        enum:
        - "IT"
        - "EN"
        - "FR"
        - "DE"
        - "SL"
      logoPSP:
        type: "string"
      paymentModel:
        type: "integer"
        format: "int64"
      paymentType:
        type: "string"
      serviceAvailability:
        type: "string"
      serviceDescription:
        type: "string"
      serviceLogo:
        type: "string"
      serviceName:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
          enum:
          - "VISA"
          - "MASTERCARD"
          - "MAESTRO"
          - "VISA_ELECTRON"
          - "AMEX"
          - "OTHER"
      urlInfoChannel:
        type: "string"
    title: "Psp"
    example:
      paymentModel: 1
      idChannel: "idChannel"
      idPsp: "idPsp"
      lingua: "IT"
      idCard: 6
      fixedCost:
        amount: 0
        currencyNumber: "currencyNumber"
        currency: "currency"
        decimalDigits: 6
      businessName: "businessName"
      logoPSP: "logoPSP"
      serviceLogo: "serviceLogo"
      serviceName: "serviceName"
      appChannel: true
      paymentType: "paymentType"
      tags:
      - "VISA"
      - "VISA"
      cancelled: true
      idIntermediary: "idIntermediary"
      serviceAvailability: "serviceAvailability"
      serviceDescription: "serviceDescription"
      id: 0
      flagStamp: true
      urlInfoChannel: "urlInfoChannel"
  PspListResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Psp"
    title: "PspListResponse"
    example:
      data:
      - paymentModel: 1
        idChannel: "idChannel"
        idPsp: "idPsp"
        lingua: "IT"
        idCard: 6
        fixedCost:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        businessName: "businessName"
        logoPSP: "logoPSP"
        serviceLogo: "serviceLogo"
        serviceName: "serviceName"
        appChannel: true
        paymentType: "paymentType"
        tags:
        - "VISA"
        - "VISA"
        cancelled: true
        idIntermediary: "idIntermediary"
        serviceAvailability: "serviceAvailability"
        serviceDescription: "serviceDescription"
        id: 0
        flagStamp: true
        urlInfoChannel: "urlInfoChannel"
      - paymentModel: 1
        idChannel: "idChannel"
        idPsp: "idPsp"
        lingua: "IT"
        idCard: 6
        fixedCost:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        businessName: "businessName"
        logoPSP: "logoPSP"
        serviceLogo: "serviceLogo"
        serviceName: "serviceName"
        appChannel: true
        paymentType: "paymentType"
        tags:
        - "VISA"
        - "VISA"
        cancelled: true
        idIntermediary: "idIntermediary"
        serviceAvailability: "serviceAvailability"
        serviceDescription: "serviceDescription"
        id: 0
        flagStamp: true
        urlInfoChannel: "urlInfoChannel"
  PspResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Psp"
    title: "PspResponse"
    example:
      data:
        paymentModel: 1
        idChannel: "idChannel"
        idPsp: "idPsp"
        lingua: "IT"
        idCard: 6
        fixedCost:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        businessName: "businessName"
        logoPSP: "logoPSP"
        serviceLogo: "serviceLogo"
        serviceName: "serviceName"
        appChannel: true
        paymentType: "paymentType"
        tags:
        - "VISA"
        - "VISA"
        cancelled: true
        idIntermediary: "idIntermediary"
        serviceAvailability: "serviceAvailability"
        serviceDescription: "serviceDescription"
        id: 0
        flagStamp: true
        urlInfoChannel: "urlInfoChannel"
  Recovery:
    type: "object"
    properties:
      password:
        type: "string"
      puk:
        type: "string"
      repeatPassword:
        type: "string"
    title: "Recovery"
    example:
      password: "password"
      repeatPassword: "repeatPassword"
      puk: "puk"
  RecoveryRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Recovery"
    title: "RecoveryRequest"
    example:
      data:
        password: "password"
        repeatPassword: "repeatPassword"
        puk: "puk"
  ResourcesResponse:
    type: "object"
    title: "ResourcesResponse"
  Resume:
    type: "object"
    properties:
      esito:
        type: "string"
      paRes:
        type: "string"
    title: "Resume"
    example:
      esito: "esito"
      paRes: "paRes"
  ResumeRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Resume"
    title: "ResumeRequest"
    example:
      data:
        esito: "esito"
        paRes: "paRes"
  SendOtp:
    type: "object"
    properties:
      context:
        type: "string"
        enum:
        - "SIGNIN"
        - "SIGNIN_PUK"
        - "LOGIN"
        - "VERIFY_EMAIL"
        - "RESET_PASSWORD"
        - "MODIFY_PHONE_NUMBER"
        - "MODIFY_EMAIL"
        - "REGISTERED_PAYMENT"
        - "PAYMENT_SUCCESS"
      newReceiver:
        type: "string"
      provider:
        type: "string"
        enum:
        - "EMAIL"
        - "SMS"
        - "PUSH"
    title: "SendOtp"
    example:
      provider: "EMAIL"
      context: "SIGNIN"
      newReceiver: "newReceiver"
  SendOtpRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SendOtp"
    title: "SendOtpRequest"
    example:
      data:
        provider: "EMAIL"
        context: "SIGNIN"
        newReceiver: "newReceiver"
  Session:
    type: "object"
    properties:
      sessionToken:
        type: "string"
      user:
        $ref: "#/definitions/User"
    title: "Session"
    example:
      sessionToken: "sessionToken"
      user:
        registeredDate: "2000-01-23T04:56:07.000+00:00"
        surname: "surname"
        puk: "puk"
        acceptTerms: true
        name: "name"
        cellphone: "cellphone"
        spidToken: "spidToken"
        otp:
          value: "value"
        temporaryCellphone: "temporaryCellphone"
        email: "email"
        status: "ANONYMOUS"
        username: "username"
  SessionResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Session"
    title: "SessionResponse"
    example:
      data:
        sessionToken: "sessionToken"
        user:
          registeredDate: "2000-01-23T04:56:07.000+00:00"
          surname: "surname"
          puk: "puk"
          acceptTerms: true
          name: "name"
          cellphone: "cellphone"
          spidToken: "spidToken"
          otp:
            value: "value"
          temporaryCellphone: "temporaryCellphone"
          email: "email"
          status: "ANONYMOUS"
          username: "username"
  SetPassword:
    type: "object"
    properties:
      password:
        type: "string"
      repeatPassword:
        type: "string"
      tokenPukVerified:
        type: "string"
      username:
        type: "string"
    title: "SetPassword"
    example:
      password: "password"
      repeatPassword: "repeatPassword"
      tokenPukVerified: "tokenPukVerified"
      username: "username"
  SetPasswordRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SetPassword"
    title: "SetPasswordRequest"
    example:
      data:
        password: "password"
        repeatPassword: "repeatPassword"
        tokenPukVerified: "tokenPukVerified"
        username: "username"
  SpidSession:
    type: "object"
    properties:
      email:
        type: "string"
      fiscalCode:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      telephoneNumber:
        type: "string"
      token:
        type: "string"
      verified:
        type: "boolean"
    title: "SpidSession"
    example:
      telephoneNumber: "telephoneNumber"
      surname: "surname"
      fiscalCode: "fiscalCode"
      name: "name"
      verified: true
      email: "email"
      token: "token"
  SpidSessionResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SpidSession"
    title: "SpidSessionResponse"
    example:
      data:
        telephoneNumber: "telephoneNumber"
        surname: "surname"
        fiscalCode: "fiscalCode"
        name: "name"
        verified: true
        email: "email"
        token: "token"
  StartSession:
    type: "object"
    properties:
      device:
        $ref: "#/definitions/Device"
      email:
        type: "string"
      idPayment:
        type: "string"
    title: "StartSession"
    example:
      idPayment: "idPayment"
      device:
        idUser: 6
        os: "ANDROID"
        scale: 1
        userAgent: "userAgent"
        idDevice: 0
        idNotificationConfig: "idNotificationConfig"
        status: "ACTIVE"
        token: "token"
      email: "email"
  StartSessionRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/StartSession"
    title: "StartSessionRequest"
    example:
      data:
        idPayment: "idPayment"
        device:
          idUser: 6
          os: "ANDROID"
          scale: 1
          userAgent: "userAgent"
          idDevice: 0
          idNotificationConfig: "idNotificationConfig"
          status: "ACTIVE"
          token: "token"
        email: "email"
  StartSpidSession:
    type: "object"
    properties:
      spidSession:
        $ref: "#/definitions/SpidSession"
    title: "StartSpidSession"
    example:
      spidSession:
        telephoneNumber: "telephoneNumber"
        surname: "surname"
        fiscalCode: "fiscalCode"
        name: "name"
        verified: true
        email: "email"
        token: "token"
  StartSpidSessionRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/StartSpidSession"
    title: "StartSpidSessionRequest"
    example:
      data:
        spidSession:
          telephoneNumber: "telephoneNumber"
          surname: "surname"
          fiscalCode: "fiscalCode"
          name: "name"
          verified: true
          email: "email"
          token: "token"
  Transaction:
    type: "object"
    properties:
      amount:
        $ref: "#/definitions/Amount"
      created:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      error:
        type: "boolean"
      fee:
        $ref: "#/definitions/Amount"
      grandTotal:
        $ref: "#/definitions/Amount"
      id:
        type: "integer"
        format: "int64"
      idPayment:
        type: "integer"
        format: "int64"
      idPsp:
        type: "integer"
        format: "int64"
      idStatus:
        type: "integer"
        format: "int64"
      idWallet:
        type: "integer"
        format: "int64"
      merchant:
        type: "string"
      nodoIdPayment:
        type: "string"
      paymentModel:
        type: "integer"
        format: "int64"
      statusMessage:
        type: "string"
      success:
        type: "boolean"
      token:
        type: "string"
      updated:
        type: "string"
        format: "date-time"
      urlCheckout3ds:
        type: "string"
      urlRedirectPSP:
        type: "string"
    title: "Transaction"
    example:
      urlRedirectPSP: "urlRedirectPSP"
      amount:
        amount: 0
        currencyNumber: "currencyNumber"
        currency: "currency"
        decimalDigits: 6
      paymentModel: 2
      idPsp: 1
      grandTotal:
        amount: 0
        currencyNumber: "currencyNumber"
        currency: "currency"
        decimalDigits: 6
      created: "2000-01-23T04:56:07.000+00:00"
      fee:
        amount: 0
        currencyNumber: "currencyNumber"
        currency: "currency"
        decimalDigits: 6
      description: "description"
      merchant: "merchant"
      error: true
      statusMessage: "statusMessage"
      token: "token"
      idPayment: 6
      idStatus: 5
      nodoIdPayment: "nodoIdPayment"
      success: true
      urlCheckout3ds: "urlCheckout3ds"
      id: 0
      idWallet: 5
      updated: "2000-01-23T04:56:07.000+00:00"
  TransactionListResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Transaction"
      size:
        type: "integer"
        format: "int32"
      start:
        type: "integer"
        format: "int32"
      total:
        type: "integer"
        format: "int32"
    title: "TransactionListResponse"
    example:
      total: 1
      data:
      - urlRedirectPSP: "urlRedirectPSP"
        amount:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        paymentModel: 2
        idPsp: 1
        grandTotal:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        created: "2000-01-23T04:56:07.000+00:00"
        fee:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        description: "description"
        merchant: "merchant"
        error: true
        statusMessage: "statusMessage"
        token: "token"
        idPayment: 6
        idStatus: 5
        nodoIdPayment: "nodoIdPayment"
        success: true
        urlCheckout3ds: "urlCheckout3ds"
        id: 0
        idWallet: 5
        updated: "2000-01-23T04:56:07.000+00:00"
      - urlRedirectPSP: "urlRedirectPSP"
        amount:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        paymentModel: 2
        idPsp: 1
        grandTotal:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        created: "2000-01-23T04:56:07.000+00:00"
        fee:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        description: "description"
        merchant: "merchant"
        error: true
        statusMessage: "statusMessage"
        token: "token"
        idPayment: 6
        idStatus: 5
        nodoIdPayment: "nodoIdPayment"
        success: true
        urlCheckout3ds: "urlCheckout3ds"
        id: 0
        idWallet: 5
        updated: "2000-01-23T04:56:07.000+00:00"
      size: 0
      start: 6
  TransactionResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Transaction"
    title: "TransactionResponse"
    example:
      data:
        urlRedirectPSP: "urlRedirectPSP"
        amount:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        paymentModel: 2
        idPsp: 1
        grandTotal:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        created: "2000-01-23T04:56:07.000+00:00"
        fee:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        description: "description"
        merchant: "merchant"
        error: true
        statusMessage: "statusMessage"
        token: "token"
        idPayment: 6
        idStatus: 5
        nodoIdPayment: "nodoIdPayment"
        success: true
        urlCheckout3ds: "urlCheckout3ds"
        id: 0
        idWallet: 5
        updated: "2000-01-23T04:56:07.000+00:00"
  TransactionStatus:
    type: "object"
    properties:
      acsUrl:
        type: "string"
      finalStatus:
        type: "boolean"
      idStatus:
        type: "integer"
        format: "int64"
      idTransaction:
        type: "integer"
        format: "int64"
      statusMessage:
        type: "string"
    title: "TransactionStatus"
    example:
      acsUrl: "acsUrl"
      idStatus: 0
      finalStatus: true
      statusMessage: "statusMessage"
      idTransaction: 6
  TransactionStatusResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/TransactionStatus"
    title: "TransactionStatusResponse"
    example:
      data:
        acsUrl: "acsUrl"
        idStatus: 0
        finalStatus: true
        statusMessage: "statusMessage"
        idTransaction: 6
  User:
    type: "object"
    properties:
      acceptTerms:
        type: "boolean"
      cellphone:
        type: "string"
      email:
        type: "string"
      name:
        type: "string"
      otp:
        $ref: "#/definitions/Otp"
      puk:
        type: "string"
      registeredDate:
        type: "string"
        format: "date-time"
      spidToken:
        type: "string"
      status:
        type: "string"
        enum:
        - "ANONYMOUS"
        - "REGISTERED"
        - "REGISTERED_SPID"
        - "NEED_OTP"
        - "NEED_PASSWORD"
        - "WAITING_NEW_PASSWORD"
        - "DELETED"
      surname:
        type: "string"
      temporaryCellphone:
        type: "string"
      username:
        type: "string"
    title: "User"
    example:
      registeredDate: "2000-01-23T04:56:07.000+00:00"
      surname: "surname"
      puk: "puk"
      acceptTerms: true
      name: "name"
      cellphone: "cellphone"
      spidToken: "spidToken"
      otp:
        value: "value"
      temporaryCellphone: "temporaryCellphone"
      email: "email"
      status: "ANONYMOUS"
      username: "username"
  UserRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/User"
    title: "UserRequest"
    example:
      data:
        registeredDate: "2000-01-23T04:56:07.000+00:00"
        surname: "surname"
        puk: "puk"
        acceptTerms: true
        name: "name"
        cellphone: "cellphone"
        spidToken: "spidToken"
        otp:
          value: "value"
        temporaryCellphone: "temporaryCellphone"
        email: "email"
        status: "ANONYMOUS"
        username: "username"
  UserResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/User"
    title: "UserResponse"
    example:
      data:
        registeredDate: "2000-01-23T04:56:07.000+00:00"
        surname: "surname"
        puk: "puk"
        acceptTerms: true
        name: "name"
        cellphone: "cellphone"
        spidToken: "spidToken"
        otp:
          value: "value"
        temporaryCellphone: "temporaryCellphone"
        email: "email"
        status: "ANONYMOUS"
        username: "username"
  VerifyOtp:
    type: "object"
    properties:
      context:
        type: "string"
        enum:
        - "SIGNIN"
        - "SIGNIN_PUK"
        - "LOGIN"
        - "VERIFY_EMAIL"
        - "RESET_PASSWORD"
        - "MODIFY_PHONE_NUMBER"
        - "MODIFY_EMAIL"
        - "REGISTERED_PAYMENT"
        - "PAYMENT_SUCCESS"
      otp:
        type: "string"
    title: "VerifyOtp"
    example:
      context: "SIGNIN"
      otp: "otp"
  VerifyOtpRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/VerifyOtp"
    title: "VerifyOtpRequest"
    example:
      data:
        context: "SIGNIN"
        otp: "otp"
  VerifyUser:
    type: "object"
    properties:
      acceptTerms:
        type: "boolean"
      cellphone:
        type: "string"
      email:
        type: "string"
      idPayment:
        type: "string"
      name:
        type: "string"
      newEmailReceiver:
        type: "string"
      otp:
        $ref: "#/definitions/Otp"
      password:
        type: "string"
      puk:
        type: "string"
      registeredDate:
        type: "string"
        format: "date-time"
      session:
        $ref: "#/definitions/Session"
      spidToken:
        type: "string"
      status:
        type: "string"
        enum:
        - "ANONYMOUS"
        - "REGISTERED"
        - "REGISTERED_SPID"
        - "NEED_OTP"
        - "NEED_PASSWORD"
        - "WAITING_NEW_PASSWORD"
        - "DELETED"
      surname:
        type: "string"
      temporaryCellphone:
        type: "string"
      tokenEMailVerify:
        type: "string"
      tokenEmailResetPassword:
        type: "string"
      tokenPukVerified:
        type: "string"
      username:
        type: "string"
      verifiedPuk:
        type: "string"
    title: "VerifyUser"
    example:
      verifiedPuk: "verifiedPuk"
      registeredDate: "2000-01-23T04:56:07.000+00:00"
      session:
        sessionToken: "sessionToken"
        user:
          registeredDate: "2000-01-23T04:56:07.000+00:00"
          surname: "surname"
          puk: "puk"
          acceptTerms: true
          name: "name"
          cellphone: "cellphone"
          spidToken: "spidToken"
          otp:
            value: "value"
          temporaryCellphone: "temporaryCellphone"
          email: "email"
          status: "ANONYMOUS"
          username: "username"
      puk: "puk"
      tokenPukVerified: "tokenPukVerified"
      acceptTerms: true
      spidToken: "spidToken"
      otp:
        value: "value"
      idPayment: "idPayment"
      password: "password"
      surname: "surname"
      name: "name"
      cellphone: "cellphone"
      temporaryCellphone: "temporaryCellphone"
      newEmailReceiver: "newEmailReceiver"
      tokenEMailVerify: "tokenEMailVerify"
      email: "email"
      status: "ANONYMOUS"
      tokenEmailResetPassword: "tokenEmailResetPassword"
      username: "username"
  VerifyUserRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/VerifyUser"
    title: "VerifyUserRequest"
    example:
      data:
        verifiedPuk: "verifiedPuk"
        registeredDate: "2000-01-23T04:56:07.000+00:00"
        session:
          sessionToken: "sessionToken"
          user:
            registeredDate: "2000-01-23T04:56:07.000+00:00"
            surname: "surname"
            puk: "puk"
            acceptTerms: true
            name: "name"
            cellphone: "cellphone"
            spidToken: "spidToken"
            otp:
              value: "value"
            temporaryCellphone: "temporaryCellphone"
            email: "email"
            status: "ANONYMOUS"
            username: "username"
        puk: "puk"
        tokenPukVerified: "tokenPukVerified"
        acceptTerms: true
        spidToken: "spidToken"
        otp:
          value: "value"
        idPayment: "idPayment"
        password: "password"
        surname: "surname"
        name: "name"
        cellphone: "cellphone"
        temporaryCellphone: "temporaryCellphone"
        newEmailReceiver: "newEmailReceiver"
        tokenEMailVerify: "tokenEMailVerify"
        email: "email"
        status: "ANONYMOUS"
        tokenEmailResetPassword: "tokenEmailResetPassword"
        username: "username"
  VerifyUserResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/VerifyUser"
    title: "VerifyUserResponse"
    example:
      data:
        verifiedPuk: "verifiedPuk"
        registeredDate: "2000-01-23T04:56:07.000+00:00"
        session:
          sessionToken: "sessionToken"
          user:
            registeredDate: "2000-01-23T04:56:07.000+00:00"
            surname: "surname"
            puk: "puk"
            acceptTerms: true
            name: "name"
            cellphone: "cellphone"
            spidToken: "spidToken"
            otp:
              value: "value"
            temporaryCellphone: "temporaryCellphone"
            email: "email"
            status: "ANONYMOUS"
            username: "username"
        puk: "puk"
        tokenPukVerified: "tokenPukVerified"
        acceptTerms: true
        spidToken: "spidToken"
        otp:
          value: "value"
        idPayment: "idPayment"
        password: "password"
        surname: "surname"
        name: "name"
        cellphone: "cellphone"
        temporaryCellphone: "temporaryCellphone"
        newEmailReceiver: "newEmailReceiver"
        tokenEMailVerify: "tokenEMailVerify"
        email: "email"
        status: "ANONYMOUS"
        tokenEmailResetPassword: "tokenEmailResetPassword"
        username: "username"
  Wallet:
    type: "object"
    properties:
      creditCard:
        $ref: "#/definitions/CreditCard"
      favourite:
        type: "boolean"
      idPagamentoFromEC:
        type: "string"
      idPsp:
        type: "integer"
        format: "int64"
      idWallet:
        type: "integer"
        format: "int64"
      lastUsage:
        type: "string"
        format: "date-time"
      matchedPsp:
        type: "boolean"
      psp:
        $ref: "#/definitions/Psp"
      pspEditable:
        type: "boolean"
      type:
        type: "string"
        enum:
        - "CREDIT_CARD"
        - "BANK_ACCOUNT"
        - "EXTERNAL_PS"
    title: "Wallet"
    example:
      idPagamentoFromEC: "idPagamentoFromEC"
      matchedPsp: true
      idPsp: 6
      lastUsage: "2000-01-23T04:56:07.000+00:00"
      pspEditable: true
      creditCard:
        expireMonth: "expireMonth"
        securityCode: "securityCode"
        flag3dsVerified: true
        holder: "holder"
        id: 0
        pan: "pan"
        brandLogo: "brandLogo"
        expireYear: "expireYear"
      favourite: true
      psp:
        paymentModel: 1
        idChannel: "idChannel"
        idPsp: "idPsp"
        lingua: "IT"
        idCard: 6
        fixedCost:
          amount: 0
          currencyNumber: "currencyNumber"
          currency: "currency"
          decimalDigits: 6
        businessName: "businessName"
        logoPSP: "logoPSP"
        serviceLogo: "serviceLogo"
        serviceName: "serviceName"
        appChannel: true
        paymentType: "paymentType"
        tags:
        - "VISA"
        - "VISA"
        cancelled: true
        idIntermediary: "idIntermediary"
        serviceAvailability: "serviceAvailability"
        serviceDescription: "serviceDescription"
        id: 0
        flagStamp: true
        urlInfoChannel: "urlInfoChannel"
      type: "CREDIT_CARD"
      idWallet: 1
  WalletListResponse:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/Wallet"
    title: "WalletListResponse"
    example:
      data:
      - idPagamentoFromEC: "idPagamentoFromEC"
        matchedPsp: true
        idPsp: 6
        lastUsage: "2000-01-23T04:56:07.000+00:00"
        pspEditable: true
        creditCard:
          expireMonth: "expireMonth"
          securityCode: "securityCode"
          flag3dsVerified: true
          holder: "holder"
          id: 0
          pan: "pan"
          brandLogo: "brandLogo"
          expireYear: "expireYear"
        favourite: true
        psp:
          paymentModel: 1
          idChannel: "idChannel"
          idPsp: "idPsp"
          lingua: "IT"
          idCard: 6
          fixedCost:
            amount: 0
            currencyNumber: "currencyNumber"
            currency: "currency"
            decimalDigits: 6
          businessName: "businessName"
          logoPSP: "logoPSP"
          serviceLogo: "serviceLogo"
          serviceName: "serviceName"
          appChannel: true
          paymentType: "paymentType"
          tags:
          - "VISA"
          - "VISA"
          cancelled: true
          idIntermediary: "idIntermediary"
          serviceAvailability: "serviceAvailability"
          serviceDescription: "serviceDescription"
          id: 0
          flagStamp: true
          urlInfoChannel: "urlInfoChannel"
        type: "CREDIT_CARD"
        idWallet: 1
      - idPagamentoFromEC: "idPagamentoFromEC"
        matchedPsp: true
        idPsp: 6
        lastUsage: "2000-01-23T04:56:07.000+00:00"
        pspEditable: true
        creditCard:
          expireMonth: "expireMonth"
          securityCode: "securityCode"
          flag3dsVerified: true
          holder: "holder"
          id: 0
          pan: "pan"
          brandLogo: "brandLogo"
          expireYear: "expireYear"
        favourite: true
        psp:
          paymentModel: 1
          idChannel: "idChannel"
          idPsp: "idPsp"
          lingua: "IT"
          idCard: 6
          fixedCost:
            amount: 0
            currencyNumber: "currencyNumber"
            currency: "currency"
            decimalDigits: 6
          businessName: "businessName"
          logoPSP: "logoPSP"
          serviceLogo: "serviceLogo"
          serviceName: "serviceName"
          appChannel: true
          paymentType: "paymentType"
          tags:
          - "VISA"
          - "VISA"
          cancelled: true
          idIntermediary: "idIntermediary"
          serviceAvailability: "serviceAvailability"
          serviceDescription: "serviceDescription"
          id: 0
          flagStamp: true
          urlInfoChannel: "urlInfoChannel"
        type: "CREDIT_CARD"
        idWallet: 1
  WalletRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Wallet"
    title: "WalletRequest"
    example:
      data:
        idPagamentoFromEC: "idPagamentoFromEC"
        matchedPsp: true
        idPsp: 6
        lastUsage: "2000-01-23T04:56:07.000+00:00"
        pspEditable: true
        creditCard:
          expireMonth: "expireMonth"
          securityCode: "securityCode"
          flag3dsVerified: true
          holder: "holder"
          id: 0
          pan: "pan"
          brandLogo: "brandLogo"
          expireYear: "expireYear"
        favourite: true
        psp:
          paymentModel: 1
          idChannel: "idChannel"
          idPsp: "idPsp"
          lingua: "IT"
          idCard: 6
          fixedCost:
            amount: 0
            currencyNumber: "currencyNumber"
            currency: "currency"
            decimalDigits: 6
          businessName: "businessName"
          logoPSP: "logoPSP"
          serviceLogo: "serviceLogo"
          serviceName: "serviceName"
          appChannel: true
          paymentType: "paymentType"
          tags:
          - "VISA"
          - "VISA"
          cancelled: true
          idIntermediary: "idIntermediary"
          serviceAvailability: "serviceAvailability"
          serviceDescription: "serviceDescription"
          id: 0
          flagStamp: true
          urlInfoChannel: "urlInfoChannel"
        type: "CREDIT_CARD"
        idWallet: 1
  WalletResponse:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Wallet"
    title: "WalletResponse"
    example:
      data:
        idPagamentoFromEC: "idPagamentoFromEC"
        matchedPsp: true
        idPsp: 6
        lastUsage: "2000-01-23T04:56:07.000+00:00"
        pspEditable: true
        creditCard:
          expireMonth: "expireMonth"
          securityCode: "securityCode"
          flag3dsVerified: true
          holder: "holder"
          id: 0
          pan: "pan"
          brandLogo: "brandLogo"
          expireYear: "expireYear"
        favourite: true
        psp:
          paymentModel: 1
          idChannel: "idChannel"
          idPsp: "idPsp"
          lingua: "IT"
          idCard: 6
          fixedCost:
            amount: 0
            currencyNumber: "currencyNumber"
            currency: "currency"
            decimalDigits: 6
          businessName: "businessName"
          logoPSP: "logoPSP"
          serviceLogo: "serviceLogo"
          serviceName: "serviceName"
          appChannel: true
          paymentType: "paymentType"
          tags:
          - "VISA"
          - "VISA"
          cancelled: true
          idIntermediary: "idIntermediary"
          serviceAvailability: "serviceAvailability"
          serviceDescription: "serviceDescription"
          id: 0
          flagStamp: true
          urlInfoChannel: "urlInfoChannel"
        type: "CREDIT_CARD"
        idWallet: 1
